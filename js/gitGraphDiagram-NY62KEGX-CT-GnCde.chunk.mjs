var tr=Object.defineProperty,er=Object.defineProperties;var or=Object.getOwnPropertyDescriptors;var _=Object.getOwnPropertySymbols;var ar=Object.prototype.hasOwnProperty,nr=Object.prototype.propertyIsEnumerable;var K=(t,r,o)=>r in t?tr(t,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[r]=o,z=(t,r)=>{for(var o in r||(r={}))ar.call(r,o)&&K(t,o,r[o]);if(_)for(var o of _(r))nr.call(r,o)&&K(t,o,r[o]);return t},Y=(t,r)=>er(t,or(r));import{p as cr}from"./chunk-4BX2VUAB-BpB8UdOe.chunk.mjs";import{I as ir}from"./chunk-QZHKN3VN-BiXEPguw.chunk.mjs";import{_ as m,t as sr,q as dr,s as hr,g as mr,a as $r,b as lr,l as w,c as gr,d as yr,u as pr,E as fr,z as xr,k as T,F as ur,G as br,H as wr,I as Br}from"./mermaid.core-DbSdpsx7.chunk.mjs";import{p as Er}from"./treemap-75Q7IDZK-DtLdDsOc.chunk.mjs";import"./index-gMaV0V1e.chunk.mjs";import"./emoji-picker-DQhTjoLy.chunk.mjs";import"./NcLoadingIcon-pzx-bM2e.chunk.mjs";import"./vue.runtime.esm-UAI8SE-v.chunk.mjs";import"./index-DUrHmx5a.chunk.mjs";import"./_baseUniq-DEMNBe0y.chunk.mjs";import"./_basePickBy-NBVa2JDr.chunk.mjs";import"./clone-CKfRO2Jx.chunk.mjs";var f={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},kr=wr.gitGraph,G=m(()=>ur(z(z({},kr),br().gitGraph)),"getConfig"),s=new ir(()=>{const t=G(),r=t.mainBranchName,o=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:o}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function N(){return Br({length:7})}m(N,"getID");function V(t,r){const o=Object.create(null);return t.reduce((n,e)=>{const a=r(e);return o[a]||(o[a]=!0,n.push(e)),n},[])}m(V,"uniqBy");var Cr=m(function(t){s.records.direction=t},"setDirection"),Lr=m(function(t){w.debug("options str",t),t=t==null?void 0:t.trim(),t=t||"{}";try{s.records.options=JSON.parse(t)}catch(r){w.error("error while parsing gitGraph options",r.message)}},"setOptions"),Tr=m(function(){return s.records.options},"getOptions"),Mr=m(function(t){let r=t.msg,o=t.id;const n=t.type;let e=t.tags;w.info("commit",r,o,n,e),w.debug("Entering commit:",r,o,n,e);const a=G();o=T.sanitizeText(o,a),r=T.sanitizeText(r,a),e=e==null?void 0:e.map(c=>T.sanitizeText(c,a));const i={id:o||s.records.seq+"-"+N(),message:r,seq:s.records.seq++,type:n!=null?n:f.NORMAL,tags:e!=null?e:[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=i,w.info("main branch",a.mainBranchName),s.records.commits.has(i.id)&&w.warn("Commit ID ".concat(i.id," already exists")),s.records.commits.set(i.id,i),s.records.branches.set(s.records.currBranch,i.id),w.debug("in pushCommit "+i.id)},"commit"),vr=m(function(t){let r=t.name;const o=t.order;if(r=T.sanitizeText(r,G()),s.records.branches.has(r))throw new Error('Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout '.concat(r,'")'));s.records.branches.set(r,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(r,{name:r,order:o}),J(r),w.debug("in createBranch")},"branch"),Pr=m(t=>{let r=t.branch,o=t.id;const n=t.type,e=t.tags,a=G();r=T.sanitizeText(r,a),o&&(o=T.sanitizeText(o,a));const i=s.records.branches.get(s.records.currBranch),c=s.records.branches.get(r),h=i?s.records.commits.get(i):void 0,$=c?s.records.commits.get(c):void 0;if(h&&$&&h.branch===r)throw new Error("Cannot merge branch '".concat(r,"' into itself."));if(s.records.currBranch===r){const d=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw d.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:["branch abc"]},d}if(h===void 0||!h){const d=new Error('Incorrect usage of "merge". Current branch ('.concat(s.records.currBranch,")has no commits"));throw d.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:["commit"]},d}if(!s.records.branches.has(r)){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw d.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:["branch ".concat(r)]},d}if($===void 0||!$){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw d.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:['"commit"']},d}if(h===$){const d=new Error('Incorrect usage of "merge". Both branches have same head');throw d.hash={text:"merge ".concat(r),token:"merge ".concat(r),expected:["branch abc"]},d}if(o&&s.records.commits.has(o)){const d=new Error('Incorrect usage of "merge". Commit with id:'+o+" already exists, use different custom id");throw d.hash={text:"merge ".concat(r," ").concat(o," ").concat(n," ").concat(e==null?void 0:e.join(" ")),token:"merge ".concat(r," ").concat(o," ").concat(n," ").concat(e==null?void 0:e.join(" ")),expected:["merge ".concat(r," ").concat(o,"_UNIQUE ").concat(n," ").concat(e==null?void 0:e.join(" "))]},d}const l=c||"",g={id:o||"".concat(s.records.seq,"-").concat(N()),message:"merged branch ".concat(r," into ").concat(s.records.currBranch),seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,l],branch:s.records.currBranch,type:f.MERGE,customType:n,customId:!!o,tags:e!=null?e:[]};s.records.head=g,s.records.commits.set(g.id,g),s.records.branches.set(s.records.currBranch,g.id),w.debug(s.records.branches),w.debug("in mergeBranch")},"merge"),Rr=m(function(t){let r=t.id,o=t.targetId,n=t.tags,e=t.parent;w.debug("Entering cherryPick:",r,o,n);const a=G();if(r=T.sanitizeText(r,a),o=T.sanitizeText(o,a),n=n==null?void 0:n.map(h=>T.sanitizeText(h,a)),e=T.sanitizeText(e,a),!r||!s.records.commits.has(r)){const h=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw h.hash={text:"cherryPick ".concat(r," ").concat(o),token:"cherryPick ".concat(r," ").concat(o),expected:["cherry-pick abc"]},h}const i=s.records.commits.get(r);if(i===void 0||!i)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(e&&!(Array.isArray(i.parents)&&i.parents.includes(e)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=i.branch;if(i.type===f.MERGE&&!e)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!o||!s.records.commits.has(o)){if(c===s.records.currBranch){const g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:"cherryPick ".concat(r," ").concat(o),token:"cherryPick ".concat(r," ").concat(o),expected:["cherry-pick abc"]},g}const h=s.records.branches.get(s.records.currBranch);if(h===void 0||!h){const g=new Error('Incorrect usage of "cherry-pick". Current branch ('.concat(s.records.currBranch,")has no commits"));throw g.hash={text:"cherryPick ".concat(r," ").concat(o),token:"cherryPick ".concat(r," ").concat(o),expected:["cherry-pick abc"]},g}const $=s.records.commits.get(h);if($===void 0||!$){const g=new Error('Incorrect usage of "cherry-pick". Current branch ('.concat(s.records.currBranch,")has no commits"));throw g.hash={text:"cherryPick ".concat(r," ").concat(o),token:"cherryPick ".concat(r," ").concat(o),expected:["cherry-pick abc"]},g}const l={id:s.records.seq+"-"+N(),message:"cherry-picked ".concat(i==null?void 0:i.message," into ").concat(s.records.currBranch),seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,i.id],branch:s.records.currBranch,type:f.CHERRY_PICK,tags:n?n.filter(Boolean):["cherry-pick:".concat(i.id).concat(i.type===f.MERGE?"|parent:".concat(e):"")]};s.records.head=l,s.records.commits.set(l.id,l),s.records.branches.set(s.records.currBranch,l.id),w.debug(s.records.branches),w.debug("in cherryPick")}},"cherryPick"),J=m(function(t){var r;if(t=T.sanitizeText(t,G()),s.records.branches.has(t)){s.records.currBranch=t;const o=s.records.branches.get(s.records.currBranch);o===void 0||!o?s.records.head=null:s.records.head=(r=s.records.commits.get(o))!=null?r:null}else{const o=new Error('Trying to checkout branch which is not yet created. (Help try using "branch '.concat(t,'")'));throw o.hash={text:"checkout ".concat(t),token:"checkout ".concat(t),expected:["branch ".concat(t)]},o}},"checkout");function j(t,r,o){const n=t.indexOf(r);n===-1?t.push(o):t.splice(n,1,o)}m(j,"upsert");function F(t){const r=t.reduce((e,a)=>e.seq>a.seq?e:a,t[0]);let o="";t.forEach(function(e){e===r?o+="	*":o+="	|"});const n=[o,r.id,r.seq];for(const e in s.records.branches)s.records.branches.get(e)===r.id&&n.push(e);if(w.debug(n.join(" ")),r.parents&&r.parents.length==2&&r.parents[0]&&r.parents[1]){const e=s.records.commits.get(r.parents[0]);j(t,r,e),r.parents[1]&&t.push(s.records.commits.get(r.parents[1]))}else{if(r.parents.length==0)return;if(r.parents[0]){const e=s.records.commits.get(r.parents[0]);j(t,r,e)}}t=V(t,e=>e.id),F(t)}m(F,"prettyPrintCommitHistory");var Ir=m(function(){w.debug(s.records.commits);const t=Q()[0];F([t])},"prettyPrint"),Ar=m(function(){s.reset(),xr()},"clear"),Gr=m(function(){return[...s.records.branchConfig.values()].map((t,r)=>t.order!==null&&t.order!==void 0?t:Y(z({},t),{order:parseFloat("0.".concat(r))})).sort((t,r)=>{var o,n;return((o=t.order)!=null?o:0)-((n=r.order)!=null?n:0)}).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),Or=m(function(){return s.records.branches},"getBranches"),qr=m(function(){return s.records.commits},"getCommits"),Q=m(function(){const t=[...s.records.commits.values()];return t.forEach(function(r){w.debug(r.id)}),t.sort((r,o)=>r.seq-o.seq),t},"getCommitsArray"),Hr=m(function(){return s.records.currBranch},"getCurrentBranch"),zr=m(function(){return s.records.direction},"getDirection"),Sr=m(function(){return s.records.head},"getHead"),X={commitType:f,getConfig:G,setDirection:Cr,setOptions:Lr,getOptions:Tr,commit:Mr,branch:vr,merge:Pr,cherryPick:Rr,checkout:J,prettyPrint:Ir,clear:Ar,getBranchesAsObjArray:Gr,getBranches:Or,getCommits:qr,getCommitsArray:Q,getCurrentBranch:Hr,getDirection:zr,getHead:Sr,setAccTitle:lr,getAccTitle:$r,getAccDescription:mr,setAccDescription:hr,setDiagramTitle:dr,getDiagramTitle:sr},Dr=m((t,r)=>{cr(t,r),t.dir&&r.setDirection(t.dir);for(const o of t.statements)Nr(o,r)},"populate"),Nr=m((t,r)=>{const o={Commit:m(n=>r.commit(Wr(n)),"Commit"),Branch:m(n=>r.branch(jr(n)),"Branch"),Merge:m(n=>r.merge(Fr(n)),"Merge"),Checkout:m(n=>r.checkout(_r(n)),"Checkout"),CherryPicking:m(n=>r.cherryPick(Kr(n)),"CherryPicking")}[t.$type];o?o(t):w.error("Unknown statement type: ".concat(t.$type))},"parseStatement"),Wr=m(t=>{var r,o;return{id:t.id,msg:(r=t.message)!=null?r:"",type:t.type!==void 0?f[t.type]:f.NORMAL,tags:(o=t.tags)!=null?o:void 0}},"parseCommit"),jr=m(t=>{var r;return{name:t.name,order:(r=t.order)!=null?r:0}},"parseBranch"),Fr=m(t=>{var r,o;return{branch:t.branch,id:(r=t.id)!=null?r:"",type:t.type!==void 0?f[t.type]:void 0,tags:(o=t.tags)!=null?o:void 0}},"parseMerge"),_r=m(t=>t.branch,"parseCheckout"),Kr=m(t=>{var r;return{id:t.id,targetId:"",tags:((r=t.tags)==null?void 0:r.length)===0?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),Yr={parse:m(async t=>{const r=await Er("gitGraph",t);w.debug(r),Dr(r,X)},"parse")},W=gr(),u=W==null?void 0:W.gitGraph,R=10,I=40,M=4,v=2,A=8,E=new Map,k=new Map,S=30,q=new Map,D=[],P=0,y="LR",Ur=m(()=>{E.clear(),k.clear(),q.clear(),P=0,D=[],y="LR"},"clear"),Z=m(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof t=="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(o=>{const n=document.createElementNS("http://www.w3.org/2000/svg","tspan");n.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),n.setAttribute("dy","1em"),n.setAttribute("x","0"),n.setAttribute("class","row"),n.textContent=o.trim(),r.appendChild(n)}),r},"drawText"),rr=m(t=>{let r,o,n;return y==="BT"?(o=m((e,a)=>e<=a,"comparisonFunc"),n=1/0):(o=m((e,a)=>e>=a,"comparisonFunc"),n=0),t.forEach(e=>{var i,c;const a=y==="TB"||y=="BT"?(i=k.get(e))==null?void 0:i.y:(c=k.get(e))==null?void 0:c.x;a!==void 0&&o(a,n)&&(r=e,n=a)}),r},"findClosestParent"),Vr=m(t=>{let r="",o=1/0;return t.forEach(n=>{const e=k.get(n).y;e<=o&&(r=n,o=e)}),r||void 0},"findClosestParentBT"),Jr=m((t,r,o)=>{let n=o,e=o;const a=[];t.forEach(i=>{const c=r.get(i);if(!c)throw new Error("Commit not found for key ".concat(i));c.parents.length?(n=Xr(c),e=Math.max(n,e)):a.push(c),Zr(c,n)}),n=e,a.forEach(i=>{rt(i,n,o)}),t.forEach(i=>{const c=r.get(i);if(c!=null&&c.parents.length){const h=Vr(c.parents);n=k.get(h).y-I,n<=e&&(e=n);const $=E.get(c.branch).pos,l=n-R;k.set(c.id,{x:$,y:l})}})},"setParallelBTPos"),Qr=m(t=>{var n;const r=rr(t.parents.filter(e=>e!==null));if(!r)throw new Error("Closest parent not found for commit ".concat(t.id));const o=(n=k.get(r))==null?void 0:n.y;if(o===void 0)throw new Error("Closest parent position not found for commit ".concat(t.id));return o},"findClosestParentPos"),Xr=m(t=>Qr(t)+I,"calculateCommitPosition"),Zr=m((t,r)=>{const o=E.get(t.branch);if(!o)throw new Error("Branch not found for commit ".concat(t.id));const n=o.pos,e=r+R;return k.set(t.id,{x:n,y:e}),{x:n,y:e}},"setCommitPosition"),rt=m((t,r,o)=>{const n=E.get(t.branch);if(!n)throw new Error("Branch not found for commit ".concat(t.id));const e=r+o,a=n.pos;k.set(t.id,{x:a,y:e})},"setRootPosition"),tt=m((t,r,o,n,e,a)=>{if(a===f.HIGHLIGHT)t.append("rect").attr("x",o.x-10).attr("y",o.y-10).attr("width",20).attr("height",20).attr("class","commit ".concat(r.id," commit-highlight").concat(e%A," ").concat(n,"-outer")),t.append("rect").attr("x",o.x-6).attr("y",o.y-6).attr("width",12).attr("height",12).attr("class","commit ".concat(r.id," commit").concat(e%A," ").concat(n,"-inner"));else if(a===f.CHERRY_PICK)t.append("circle").attr("cx",o.x).attr("cy",o.y).attr("r",10).attr("class","commit ".concat(r.id," ").concat(n)),t.append("circle").attr("cx",o.x-3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class","commit ".concat(r.id," ").concat(n)),t.append("circle").attr("cx",o.x+3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class","commit ".concat(r.id," ").concat(n)),t.append("line").attr("x1",o.x+3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class","commit ".concat(r.id," ").concat(n)),t.append("line").attr("x1",o.x-3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class","commit ".concat(r.id," ").concat(n));else{const i=t.append("circle");if(i.attr("cx",o.x),i.attr("cy",o.y),i.attr("r",r.type===f.MERGE?9:10),i.attr("class","commit ".concat(r.id," commit").concat(e%A)),a===f.MERGE){const c=t.append("circle");c.attr("cx",o.x),c.attr("cy",o.y),c.attr("r",6),c.attr("class","commit ".concat(n," ").concat(r.id," commit").concat(e%A))}a===f.REVERSE&&t.append("path").attr("d","M ".concat(o.x-5,",").concat(o.y-5,"L").concat(o.x+5,",").concat(o.y+5,"M").concat(o.x-5,",").concat(o.y+5,"L").concat(o.x+5,",").concat(o.y-5)).attr("class","commit ".concat(n," ").concat(r.id," commit").concat(e%A))}},"drawCommitBullet"),et=m((t,r,o,n)=>{var e;if(r.type!==f.CHERRY_PICK&&(r.customId&&r.type===f.MERGE||r.type!==f.MERGE)&&(u!=null&&u.showCommitLabel)){const a=t.append("g"),i=a.insert("rect").attr("class","commit-label-bkg"),c=a.append("text").attr("x",n).attr("y",o.y+25).attr("class","commit-label").text(r.id),h=(e=c.node())==null?void 0:e.getBBox();if(h&&(i.attr("x",o.posWithOffset-h.width/2-v).attr("y",o.y+13.5).attr("width",h.width+2*v).attr("height",h.height+2*v),y==="TB"||y==="BT"?(i.attr("x",o.x-(h.width+4*M+5)).attr("y",o.y-12),c.attr("x",o.x-(h.width+4*M)).attr("y",o.y+h.height-12)):c.attr("x",o.posWithOffset-h.width/2),u.rotateCommitLabel))if(y==="TB"||y==="BT")c.attr("transform","rotate(-45, "+o.x+", "+o.y+")"),i.attr("transform","rotate(-45, "+o.x+", "+o.y+")");else{const $=-7.5-(h.width+10)/25*9.5,l=10+h.width/25*8.5;a.attr("transform","translate("+$+", "+l+") rotate(-45, "+n+", "+o.y+")")}}},"drawCommitLabel"),ot=m((t,r,o,n)=>{var e;if(r.tags.length>0){let a=0,i=0,c=0;const h=[];for(const $ of r.tags.reverse()){const l=t.insert("polygon"),g=t.append("circle"),d=t.append("text").attr("y",o.y-16-a).attr("class","tag-label").text($),p=(e=d.node())==null?void 0:e.getBBox();if(!p)throw new Error("Tag bbox not found");i=Math.max(i,p.width),c=Math.max(c,p.height),d.attr("x",o.posWithOffset-p.width/2),h.push({tag:d,hole:g,rect:l,yOffset:a}),a+=20}for(const{tag:$,hole:l,rect:g,yOffset:d}of h){const p=c/2,b=o.y-19.2-d;if(g.attr("class","tag-label-bkg").attr("points","\n      ".concat(n-i/2-M/2,",").concat(b+v,"  \n      ").concat(n-i/2-M/2,",").concat(b-v,"\n      ").concat(o.posWithOffset-i/2-M,",").concat(b-p-v,"\n      ").concat(o.posWithOffset+i/2+M,",").concat(b-p-v,"\n      ").concat(o.posWithOffset+i/2+M,",").concat(b+p+v,"\n      ").concat(o.posWithOffset-i/2-M,",").concat(b+p+v)),l.attr("cy",b).attr("cx",n-i/2+M/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){const x=n+d;g.attr("class","tag-label-bkg").attr("points","\n        ".concat(o.x,",").concat(x+2,"\n        ").concat(o.x,",").concat(x-2,"\n        ").concat(o.x+R,",").concat(x-p-2,"\n        ").concat(o.x+R+i+4,",").concat(x-p-2,"\n        ").concat(o.x+R+i+4,",").concat(x+p+2,"\n        ").concat(o.x+R,",").concat(x+p+2)).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),l.attr("cx",o.x+M/2).attr("cy",x).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),$.attr("x",o.x+5).attr("y",x+3).attr("transform","translate(14,14) rotate(45, "+o.x+","+n+")")}}}},"drawCommitTags"),at=m(t=>{var r;switch((r=t.customType)!=null?r:t.type){case f.NORMAL:return"commit-normal";case f.REVERSE:return"commit-reverse";case f.HIGHLIGHT:return"commit-highlight";case f.MERGE:return"commit-merge";case f.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),nt=m((t,r,o,n)=>{var a,i,c;const e={x:0,y:0};if(t.parents.length>0){const h=rr(t.parents);if(h){const $=(a=n.get(h))!=null?a:e;return r==="TB"?$.y+I:r==="BT"?((i=n.get(t.id))!=null?i:e).y-I:$.x+I}}else return r==="TB"?S:r==="BT"?((c=n.get(t.id))!=null?c:e).y-I:0;return 0},"calculatePosition"),ct=m((t,r,o)=>{var i,c;const n=y==="BT"&&o?r:r+R,e=y==="TB"||y==="BT"?n:(i=E.get(t.branch))==null?void 0:i.pos,a=y==="TB"||y==="BT"?(c=E.get(t.branch))==null?void 0:c.pos:n;if(a===void 0||e===void 0)throw new Error("Position were undefined for commit ".concat(t.id));return{x:a,y:e,posWithOffset:n}},"getCommitPosition"),U=m((t,r,o)=>{var l;if(!u)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),e=t.append("g").attr("class","commit-labels");let a=y==="TB"||y==="BT"?S:0;const i=[...r.keys()],c=(l=u==null?void 0:u.parallelCommits)!=null?l:!1,h=m((g,d)=>{var x,L;const p=(x=r.get(g))==null?void 0:x.seq,b=(L=r.get(d))==null?void 0:L.seq;return p!==void 0&&b!==void 0?p-b:0},"sortKeys");let $=i.sort(h);y==="BT"&&(c&&Jr($,r,a),$=$.reverse()),$.forEach(g=>{var b,x,L;const d=r.get(g);if(!d)throw new Error("Commit not found for key ".concat(g));c&&(a=nt(d,y,a,k));const p=ct(d,a,c);if(o){const O=at(d),C=(b=d.customType)!=null?b:d.type,B=(L=(x=E.get(d.branch))==null?void 0:x.index)!=null?L:0;tt(n,d,p,O,B,C),et(e,d,p,a),ot(e,d,p,a)}y==="TB"||y==="BT"?k.set(d.id,{x:p.x,y:p.posWithOffset}):k.set(d.id,{x:p.posWithOffset,y:p.y}),a=y==="BT"&&c?a+I:a+I+R,a>P&&(P=a)})},"drawCommits"),it=m((t,r,o,n,e)=>{const a=(y==="TB"||y==="BT"?o.x<n.x:o.y<n.y)?r.branch:t.branch,i=m(h=>h.branch===a,"isOnBranchToGetCurve"),c=m(h=>h.seq>t.seq&&h.seq<r.seq,"isBetweenCommits");return[...e.values()].some(h=>c(h)&&i(h))},"shouldRerouteArrow"),H=m((t,r,o=0)=>{const n=t+Math.abs(t-r)/2;if(o>5)return n;if(D.every(a=>Math.abs(a-n)>=10))return D.push(n),n;const e=Math.abs(t-r);return H(t,r-e/5,o+1)},"findLane"),st=m((t,r,o,n)=>{var p,b,x,L,O;const e=k.get(r.id),a=k.get(o.id);if(e===void 0||a===void 0)throw new Error("Commit positions not found for commits ".concat(r.id," and ").concat(o.id));const i=it(r,o,e,a,n);let c="",h="",$=0,l=0,g=(p=E.get(o.branch))==null?void 0:p.index;o.type===f.MERGE&&r.id!==o.parents[0]&&(g=(b=E.get(r.branch))==null?void 0:b.index);let d;if(i){c="A 10 10, 0, 0, 0,",h="A 10 10, 0, 0, 1,",$=10,l=10;const C=e.y<a.y?H(e.y,a.y):H(a.y,e.y),B=e.x<a.x?H(e.x,a.x):H(a.x,e.x);y==="TB"?e.x<a.x?d="M ".concat(e.x," ").concat(e.y," L ").concat(B-$," ").concat(e.y," ").concat(h," ").concat(B," ").concat(e.y+l," L ").concat(B," ").concat(a.y-$," ").concat(c," ").concat(B+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):(g=(x=E.get(r.branch))==null?void 0:x.index,d="M ".concat(e.x," ").concat(e.y," L ").concat(B+$," ").concat(e.y," ").concat(c," ").concat(B," ").concat(e.y+l," L ").concat(B," ").concat(a.y-$," ").concat(h," ").concat(B-l," ").concat(a.y," L ").concat(a.x," ").concat(a.y)):y==="BT"?e.x<a.x?d="M ".concat(e.x," ").concat(e.y," L ").concat(B-$," ").concat(e.y," ").concat(c," ").concat(B," ").concat(e.y-l," L ").concat(B," ").concat(a.y+$," ").concat(h," ").concat(B+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):(g=(L=E.get(r.branch))==null?void 0:L.index,d="M ".concat(e.x," ").concat(e.y," L ").concat(B+$," ").concat(e.y," ").concat(h," ").concat(B," ").concat(e.y-l," L ").concat(B," ").concat(a.y+$," ").concat(c," ").concat(B-l," ").concat(a.y," L ").concat(a.x," ").concat(a.y)):e.y<a.y?d="M ".concat(e.x," ").concat(e.y," L ").concat(e.x," ").concat(C-$," ").concat(c," ").concat(e.x+l," ").concat(C," L ").concat(a.x-$," ").concat(C," ").concat(h," ").concat(a.x," ").concat(C+l," L ").concat(a.x," ").concat(a.y):(g=(O=E.get(r.branch))==null?void 0:O.index,d="M ".concat(e.x," ").concat(e.y," L ").concat(e.x," ").concat(C+$," ").concat(h," ").concat(e.x+l," ").concat(C," L ").concat(a.x-$," ").concat(C," ").concat(c," ").concat(a.x," ").concat(C-l," L ").concat(a.x," ").concat(a.y))}else c="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",$=20,l=20,y==="TB"?(e.x<a.x&&(o.type===f.MERGE&&r.id!==o.parents[0]?d="M ".concat(e.x," ").concat(e.y," L ").concat(e.x," ").concat(a.y-$," ").concat(c," ").concat(e.x+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x-$," ").concat(e.y," ").concat(h," ").concat(a.x," ").concat(e.y+l," L ").concat(a.x," ").concat(a.y)),e.x>a.x&&(c="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",$=20,l=20,o.type===f.MERGE&&r.id!==o.parents[0]?d="M ".concat(e.x," ").concat(e.y," L ").concat(e.x," ").concat(a.y-$," ").concat(h," ").concat(e.x-l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x+$," ").concat(e.y," ").concat(c," ").concat(a.x," ").concat(e.y+l," L ").concat(a.x," ").concat(a.y)),e.x===a.x&&(d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x," ").concat(a.y))):y==="BT"?(e.x<a.x&&(o.type===f.MERGE&&r.id!==o.parents[0]?d="M ".concat(e.x," ").concat(e.y," L ").concat(e.x," ").concat(a.y+$," ").concat(h," ").concat(e.x+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x-$," ").concat(e.y," ").concat(c," ").concat(a.x," ").concat(e.y-l," L ").concat(a.x," ").concat(a.y)),e.x>a.x&&(c="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",$=20,l=20,o.type===f.MERGE&&r.id!==o.parents[0]?d="M ".concat(e.x," ").concat(e.y," L ").concat(e.x," ").concat(a.y+$," ").concat(c," ").concat(e.x-l," ").concat(a.y," L ").concat(a.x," ").concat(a.y):d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x-$," ").concat(e.y," ").concat(c," ").concat(a.x," ").concat(e.y-l," L ").concat(a.x," ").concat(a.y)),e.x===a.x&&(d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x," ").concat(a.y))):(e.y<a.y&&(o.type===f.MERGE&&r.id!==o.parents[0]?d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x-$," ").concat(e.y," ").concat(h," ").concat(a.x," ").concat(e.y+l," L ").concat(a.x," ").concat(a.y):d="M ".concat(e.x," ").concat(e.y," L ").concat(e.x," ").concat(a.y-$," ").concat(c," ").concat(e.x+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y)),e.y>a.y&&(o.type===f.MERGE&&r.id!==o.parents[0]?d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x-$," ").concat(e.y," ").concat(c," ").concat(a.x," ").concat(e.y-l," L ").concat(a.x," ").concat(a.y):d="M ".concat(e.x," ").concat(e.y," L ").concat(e.x," ").concat(a.y+$," ").concat(h," ").concat(e.x+l," ").concat(a.y," L ").concat(a.x," ").concat(a.y)),e.y===a.y&&(d="M ".concat(e.x," ").concat(e.y," L ").concat(a.x," ").concat(a.y)));if(d===void 0)throw new Error("Line definition not found");t.append("path").attr("d",d).attr("class","arrow arrow"+g%A)},"drawArrow"),dt=m((t,r)=>{const o=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(n=>{const e=r.get(n);e.parents&&e.parents.length>0&&e.parents.forEach(a=>{st(o,r.get(a),e,r)})})},"drawArrows"),ht=m((t,r)=>{const o=t.append("g");r.forEach((n,e)=>{var p;const a=e%A,i=(p=E.get(n.name))==null?void 0:p.pos;if(i===void 0)throw new Error("Position not found for branch ".concat(n.name));const c=o.append("line");c.attr("x1",0),c.attr("y1",i),c.attr("x2",P),c.attr("y2",i),c.attr("class","branch branch"+a),y==="TB"?(c.attr("y1",S),c.attr("x1",i),c.attr("y2",P),c.attr("x2",i)):y==="BT"&&(c.attr("y1",P),c.attr("x1",i),c.attr("y2",S),c.attr("x2",i)),D.push(i);const h=n.name,$=Z(h),l=o.insert("rect"),g=o.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);g.node().appendChild($);const d=$.getBBox();l.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-((u==null?void 0:u.rotateCommitLabel)===!0?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),g.attr("transform","translate("+(-d.width-14-((u==null?void 0:u.rotateCommitLabel)===!0?30:0))+", "+(i-d.height/2-1)+")"),y==="TB"?(l.attr("x",i-d.width/2-10).attr("y",0),g.attr("transform","translate("+(i-d.width/2-5)+", 0)")):y==="BT"?(l.attr("x",i-d.width/2-10).attr("y",P),g.attr("transform","translate("+(i-d.width/2-5)+", "+P+")")):l.attr("transform","translate(-19, "+(i-d.height/2)+")")})},"drawBranches"),mt=m(function(t,r,o,n,e){return E.set(t,{pos:r,index:o}),r+=50+(e?40:0)+(y==="TB"||y==="BT"?n.width/2:0),r},"setBranchPosition"),$t=m(function(t,r,o,n){var $,l;if(Ur(),w.debug("in gitgraph renderer",t+"\n","id:",r,o),!u)throw new Error("GitGraph config not found");const e=($=u.rotateCommitLabel)!=null?$:!1,a=n.db;q=a.getCommits();const i=a.getBranchesAsObjArray();y=a.getDirection();const c=yr('[id="'.concat(r,'"]'));let h=0;i.forEach((g,d)=>{var C;const p=Z(g.name),b=c.append("g"),x=b.insert("g").attr("class","branchLabel"),L=x.insert("g").attr("class","label branch-label");(C=L.node())==null||C.appendChild(p);const O=p.getBBox();h=mt(g.name,h,d,O,e),L.remove(),x.remove(),b.remove()}),U(c,q,!1),u.showBranches&&ht(c,i),dt(c,q),U(c,q,!0),pr.insertTitle(c,"gitTitleText",(l=u.titleTopMargin)!=null?l:0,a.getDiagramTitle()),fr(void 0,c,u.diagramPadding,u.useMaxWidth)},"draw"),lt={draw:$t},gt=m(t=>"\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ".concat([0,1,2,3,4,5,6,7].map(r=>"\n        .branch-label".concat(r," { fill: ").concat(t["gitBranchLabel"+r],"; }\n        .commit").concat(r," { stroke: ").concat(t["git"+r],"; fill: ").concat(t["git"+r],"; }\n        .commit-highlight").concat(r," { stroke: ").concat(t["gitInv"+r],"; fill: ").concat(t["gitInv"+r],"; }\n        .label").concat(r,"  { fill: ").concat(t["git"+r],"; }\n        .arrow").concat(r," { stroke: ").concat(t["git"+r],"; }\n        ")).join("\n"),"\n\n  .branch {\n    stroke-width: 1;\n    stroke: ").concat(t.lineColor,";\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ").concat(t.commitLabelFontSize,"; fill: ").concat(t.commitLabelColor,";}\n  .commit-label-bkg { font-size: ").concat(t.commitLabelFontSize,"; fill: ").concat(t.commitLabelBackground,"; opacity: 0.5; }\n  .tag-label { font-size: ").concat(t.tagLabelFontSize,"; fill: ").concat(t.tagLabelColor,";}\n  .tag-label-bkg { fill: ").concat(t.tagLabelBackground,"; stroke: ").concat(t.tagLabelBorder,"; }\n  .tag-hole { fill: ").concat(t.textColor,"; }\n\n  .commit-merge {\n    stroke: ").concat(t.primaryColor,";\n    fill: ").concat(t.primaryColor,";\n  }\n  .commit-reverse {\n    stroke: ").concat(t.primaryColor,";\n    fill: ").concat(t.primaryColor,";\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ").concat(t.primaryColor,";\n    fill: ").concat(t.primaryColor,";\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ").concat(t.textColor,";\n  }\n"),"getStyles"),yt=gt,vt={parser:Yr,db:X,renderer:lt,styles:yt};export{vt as diagram};
//# sourceMappingURL=gitGraphDiagram-NY62KEGX-CT-GnCde.chunk.mjs.map
