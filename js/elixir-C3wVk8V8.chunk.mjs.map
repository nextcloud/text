{"version":3,"file":"elixir-C3wVk8V8.chunk.mjs","sources":["../node_modules/highlight.js/lib/languages/elixir.js"],"sourcesContent":["/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\n\n/** @type LanguageFn */\nfunction elixir(hljs) {\n  const regex = hljs.regex;\n  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\\\?)?';\n  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  const KEYWORDS = [\n    \"after\",\n    \"alias\",\n    \"and\",\n    \"case\",\n    \"catch\",\n    \"cond\",\n    \"defstruct\",\n    \"defguard\",\n    \"do\",\n    \"else\",\n    \"end\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"not\",\n    \"or\",\n    \"quote\",\n    \"raise\",\n    \"receive\",\n    \"require\",\n    \"reraise\",\n    \"rescue\",\n    \"try\",\n    \"unless\",\n    \"unquote\",\n    \"unquote_splicing\",\n    \"use\",\n    \"when\",\n    \"with|0\"\n  ];\n  const LITERALS = [\n    \"false\",\n    \"nil\",\n    \"true\"\n  ];\n  const KWS = {\n    $pattern: ELIXIR_IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /#\\{/,\n    end: /\\}/,\n    keywords: KWS\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[0-9][0-9_]*(\\\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  // TODO: could be tightened\n  // https://elixir-lang.readthedocs.io/en/latest/intro/18.html\n  // but you also need to include closing delemeters in the escape list per\n  // individual sigil mode from what I can tell,\n  // ie: \\} might or might not be an escape depending on the sigil used\n  const ESCAPES_RE = /\\\\[\\s\\S]/;\n  // const ESCAPES_RE = /\\\\[\"'\\\\abdefnrstv0]/;\n  const BACKSLASH_ESCAPE = {\n    match: ESCAPES_RE,\n    scope: \"char.escape\",\n    relevance: 0\n  };\n  const SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  const SIGIL_DELIMITER_MODES = [\n    {\n      begin: /\"/,\n      end: /\"/\n    },\n    {\n      begin: /'/,\n      end: /'/\n    },\n    {\n      begin: /\\//,\n      end: /\\//\n    },\n    {\n      begin: /\\|/,\n      end: /\\|/\n    },\n    {\n      begin: /\\(/,\n      end: /\\)/\n    },\n    {\n      begin: /\\[/,\n      end: /\\]/\n    },\n    {\n      begin: /\\{/,\n      end: /\\}/\n    },\n    {\n      begin: /</,\n      end: />/\n    }\n  ];\n  const escapeSigilEnd = (end) => {\n    return {\n      scope: \"char.escape\",\n      begin: regex.concat(/\\\\/, end),\n      relevance: 0\n    };\n  };\n  const LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n      { contains: [\n        escapeSigilEnd(x.end),\n        BACKSLASH_ESCAPE,\n        SUBST\n      ] }\n    ))\n  };\n\n  const UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n      { contains: [ escapeSigilEnd(x.end) ] }\n    ))\n  };\n\n  const REGEX_SIGIL = {\n    className: 'regex',\n    variants: [\n      {\n        begin: '~r' + '(?=' + SIGIL_DELIMITERS + ')',\n        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n          {\n            end: regex.concat(x.end, /[uismxfU]{0,7}/),\n            contains: [\n              escapeSigilEnd(x.end),\n              BACKSLASH_ESCAPE,\n              SUBST\n            ]\n          }\n        ))\n      },\n      {\n        begin: '~R' + '(?=' + SIGIL_DELIMITERS + ')',\n        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n          {\n            end: regex.concat(x.end, /[uismxfU]{0,7}/),\n            contains: [ escapeSigilEnd(x.end) ]\n          })\n        )\n      }\n    ]\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ],\n    variants: [\n      {\n        begin: /\"\"\"/,\n        end: /\"\"\"/\n      },\n      {\n        begin: /'''/,\n        end: /'''/\n      },\n      {\n        begin: /~S\"\"\"/,\n        end: /\"\"\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S\"/,\n        end: /\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'''/,\n        end: /'''/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'/,\n        end: /'/,\n        contains: [] // override default\n      },\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      }\n    ]\n  };\n  const FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro defmacrop',\n    end: /\\B\\b/, // the mode is ended by the title\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: ELIXIR_IDENT_RE,\n        endsParent: true\n      })\n    ]\n  };\n  const CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord',\n    end: /\\bdo\\b|$|;/\n  });\n  const ELIXIR_DEFAULT_CONTAINS = [\n    STRING,\n    REGEX_SIGIL,\n    UPCASE_SIGIL,\n    LOWERCASE_SIGIL,\n    hljs.HASH_COMMENT_MODE,\n    CLASS,\n    FUNCTION,\n    { begin: '::' },\n    {\n      className: 'symbol',\n      begin: ':(?![\\\\s:])',\n      contains: [\n        STRING,\n        { begin: ELIXIR_METHOD_RE }\n      ],\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\n      relevance: 0\n    },\n    { // Usage of a module, struct, etc.\n      className: 'title.class',\n      begin: /(\\b[A-Z][a-zA-Z0-9_]+)/,\n      relevance: 0\n    },\n    NUMBER,\n    {\n      className: 'variable',\n      begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))'\n    }\n    // -> has been removed, capnproto always uses this grammar construct\n  ];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n\n  return {\n    name: 'Elixir',\n    aliases: [\n      'ex',\n      'exs'\n    ],\n    keywords: KWS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;\n"],"names":["elixir","hljs","regex","ELIXIR_IDENT_RE","ELIXIR_METHOD_RE","KWS","SUBST","NUMBER","BACKSLASH_ESCAPE","SIGIL_DELIMITERS","SIGIL_DELIMITER_MODES","escapeSigilEnd","end","LOWERCASE_SIGIL","x","UPCASE_SIGIL","REGEX_SIGIL","STRING","FUNCTION","CLASS","ELIXIR_DEFAULT_CONTAINS","elixir_1"],"mappings":"4YASA,SAASA,EAAOC,EAAM,CACpB,MAAMC,EAAQD,EAAK,MACbE,EAAkB,kCAClBC,EAAmB,mFAuCnBC,EAAM,CACV,SAAUF,EACV,QAxCe,CACf,QACA,QACA,MACA,OACA,QACA,OACA,YACA,WACA,KACA,OACA,MACA,KACA,MACA,KACA,SACA,KACA,MACA,KACA,QACA,QACA,UACA,UACA,UACA,SACA,MACA,SACA,UACA,mBACA,MACA,OACA,QACJ,EASI,QARe,CACf,QACA,MACA,MACJ,CAKA,EACQG,EAAQ,CACZ,UAAW,QACX,MAAO,MACP,IAAK,KACL,SAAUD,CACd,EACQE,EAAS,CACb,UAAW,SACX,MAAO,uGACP,UAAW,CACf,EAQQC,EAAmB,CACvB,MAHiB,WAIjB,MAAO,cACP,UAAW,CACf,EACQC,EAAmB,cACnBC,EAAwB,CAC5B,CACE,MAAO,IACP,IAAK,GACN,EACD,CACE,MAAO,IACP,IAAK,GACN,EACD,CACE,MAAO,KACP,IAAK,IACN,EACD,CACE,MAAO,KACP,IAAK,IACN,EACD,CACE,MAAO,KACP,IAAK,IACN,EACD,CACE,MAAO,KACP,IAAK,IACN,EACD,CACE,MAAO,KACP,IAAK,IACN,EACD,CACE,MAAO,IACP,IAAK,GACN,CACL,EACQC,EAAkBC,IACf,CACL,MAAO,cACP,MAAOV,EAAM,OAAO,KAAMU,CAAG,EAC7B,UAAW,CACjB,GAEQC,EAAkB,CACtB,UAAW,SACX,MAAO,YAAmBJ,EAAmB,IAC7C,SAAUC,EAAsB,IAAII,GAAKb,EAAK,QAAQa,EACpD,CAAE,SAAU,CACVH,EAAeG,EAAE,GAAG,EACpBN,EACAF,CACR,CAAS,CACT,CAAK,CACL,EAEQS,EAAe,CACnB,UAAW,SACX,MAAO,YAAmBN,EAAmB,IAC7C,SAAUC,EAAsB,IAAII,GAAKb,EAAK,QAAQa,EACpD,CAAE,SAAU,CAAEH,EAAeG,EAAE,GAAG,CAAC,CAAI,CAC7C,CAAK,CACL,EAEQE,EAAc,CAClB,UAAW,QACX,SAAU,CACR,CACE,MAAO,QAAeP,EAAmB,IACzC,SAAUC,EAAsB,IAAII,GAAKb,EAAK,QAAQa,EACpD,CACE,IAAKZ,EAAM,OAAOY,EAAE,IAAK,gBAAgB,EACzC,SAAU,CACRH,EAAeG,EAAE,GAAG,EACpBN,EACAF,CACD,CACF,CACX,CAAS,CACF,EACD,CACE,MAAO,QAAeG,EAAmB,IACzC,SAAUC,EAAsB,IAAII,GAAKb,EAAK,QAAQa,EACpD,CACE,IAAKZ,EAAM,OAAOY,EAAE,IAAK,gBAAgB,EACzC,SAAU,CAAEH,EAAeG,EAAE,GAAG,CAAG,CAC/C,CAAW,CACF,CACF,CACF,CACL,EAEQG,EAAS,CACb,UAAW,SACX,SAAU,CACRhB,EAAK,iBACLK,CACD,EACD,SAAU,CACR,CACE,MAAO,MACP,IAAK,KACN,EACD,CACE,MAAO,MACP,IAAK,KACN,EACD,CACE,MAAO,QACP,IAAK,MACL,SAAU,CAAE,CACb,EACD,CACE,MAAO,MACP,IAAK,IACL,SAAU,CAAE,CACb,EACD,CACE,MAAO,QACP,IAAK,MACL,SAAU,CAAE,CACb,EACD,CACE,MAAO,MACP,IAAK,IACL,SAAU,CAAE,CACb,EACD,CACE,MAAO,IACP,IAAK,GACN,EACD,CACE,MAAO,IACP,IAAK,GACN,CACF,CACL,EACQY,EAAW,CACf,UAAW,WACX,cAAe,8BACf,IAAK,OACL,SAAU,CACRjB,EAAK,QAAQA,EAAK,WAAY,CAC5B,MAAOE,EACP,WAAY,EACpB,CAAO,CACF,CACL,EACQgB,EAAQlB,EAAK,QAAQiB,EAAU,CACnC,UAAW,QACX,cAAe,0CACf,IAAK,YACT,CAAG,EACKE,EAA0B,CAC9BH,EACAD,EACAD,EACAF,EACAZ,EAAK,kBACLkB,EACAD,EACA,CAAE,MAAO,IAAM,EACf,CACE,UAAW,SACX,MAAO,cACP,SAAU,CACRD,EACA,CAAE,MAAOb,CAAkB,CAC5B,EACD,UAAW,CACZ,EACD,CACE,UAAW,SACX,MAAOD,EAAkB,SACzB,UAAW,CACZ,EACD,CACE,UAAW,cACX,MAAO,yBACP,UAAW,CACZ,EACDI,EACA,CACE,UAAW,WACX,MAAO,4BACR,CAEL,EACE,OAAAD,EAAM,SAAWc,EAEV,CACL,KAAM,SACN,QAAS,CACP,KACA,KACD,EACD,SAAUf,EACV,SAAUe,CACd,CACA,CAEA,IAAAC,EAAiBrB","x_google_ignoreList":[0]}