{"version":3,"file":"hy-DNCLkWZT.chunk.mjs","sources":["../node_modules/highlight.js/lib/languages/hy.js"],"sourcesContent":["/*\nLanguage: Hy\nDescription: Hy is a wonderful dialect of Lisp thatâ€™s embedded in Python.\nAuthor: Sergey Sobko <s.sobko@profitware.ru>\nWebsite: http://docs.hylang.org/en/stable/\nCategory: lisp\n*/\n\nfunction hy(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    built_in:\n      // keywords\n      '!= % %= & &= * ** **= *= *map '\n      + '+ += , --build-class-- --import-- -= . / // //= '\n      + '/= < << <<= <= = > >= >> >>= '\n      + '@ @= ^ ^= abs accumulate all and any ap-compose '\n      + 'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe '\n      + 'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast '\n      + 'callable calling-module-name car case cdr chain chr coll? combinations compile '\n      + 'compress cond cons cons? continue count curry cut cycle dec '\n      + 'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn '\n      + 'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir '\n      + 'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? '\n      + 'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first '\n      + 'flatten float? fn fnc fnr for for* format fraction genexpr '\n      + 'gensym get getattr global globals group-by hasattr hash hex id '\n      + 'identity if if* if-not if-python2 import in inc input instance? '\n      + 'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even '\n      + 'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none '\n      + 'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass '\n      + 'iter iterable? iterate iterator? keyword keyword? lambda last len let '\n      + 'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all '\n      + 'map max merge-with method-decorator min multi-decorator multicombinations name neg? next '\n      + 'none? nonlocal not not-in not? nth numeric? oct odd? open '\n      + 'or ord partition permutations pos? post-route postwalk pow prewalk print '\n      + 'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str '\n      + 'recursive-replace reduce remove repeat repeatedly repr require rest round route '\n      + 'route-with-methods rwm second seq set-comp setattr setv some sorted string '\n      + 'string? sum switch symbol? take take-nth take-while tee try unless '\n      + 'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms '\n      + 'xi xor yield yield-from zero? zip zip-longest | |= ~'\n  };\n\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });\n  const COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    { relevance: 0 }\n  );\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n  };\n  const COLLECTION = {\n    begin: '[\\\\[\\\\{]',\n    end: '[\\\\]\\\\}]',\n    relevance: 0\n  };\n  const HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    className: 'name',\n    relevance: 0,\n    keywords: keywords,\n    begin: SYMBOL_RE,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [\n    LIST,\n    STRING,\n    HINT,\n    HINT_COL,\n    COMMENT,\n    KEY,\n    COLLECTION,\n    NUMBER,\n    LITERAL,\n    SYMBOL\n  ];\n\n  LIST.contains = [\n    hljs.COMMENT('comment', ''),\n    NAME,\n    BODY\n  ];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    name: 'Hy',\n    aliases: [ 'hylang' ],\n    illegal: /\\S/,\n    contains: [\n      hljs.SHEBANG(),\n      LIST,\n      STRING,\n      HINT,\n      HINT_COL,\n      COMMENT,\n      KEY,\n      COLLECTION,\n      NUMBER,\n      LITERAL\n    ]\n  };\n}\n\nmodule.exports = hy;\n"],"names":["hy","hljs","SYMBOLSTART","SYMBOL_RE","keywords","SIMPLE_NUMBER_RE","SYMBOL","NUMBER","STRING","COMMENT","LITERAL","COLLECTION","HINT","HINT_COL","KEY","LIST","BODY","NAME","DEFAULT_CONTAINS","hy_1"],"mappings":"4YAQA,SAASA,EAAGC,EAAM,CAChB,MAAMC,EAAc,wBACdC,EAAY,IAAMD,EAAc,KAAOA,EAAc,WACrDE,EAAW,CACf,SAAUD,EACV,SAEE,kkEA6BN,EAEQE,EAAmB,sBAEnBC,EAAS,CACb,MAAOH,EACP,UAAW,CACf,EACQI,EAAS,CACb,UAAW,SACX,MAAOF,EACP,UAAW,CACf,EACQG,EAASP,EAAK,QAAQA,EAAK,kBAAmB,CAAE,QAAS,IAAI,CAAE,EAC/DQ,EAAUR,EAAK,QACnB,IACA,IACA,CAAE,UAAW,CAAG,CACpB,EACQS,EAAU,CACd,UAAW,UACX,MAAO,iCACX,EACQC,EAAa,CACjB,MAAO,WACP,IAAK,WACL,UAAW,CACf,EACQC,EAAO,CACX,UAAW,UACX,MAAO,MAAQT,CACnB,EACQU,EAAWZ,EAAK,QAAQ,SAAU,KAAK,EACvCa,EAAM,CACV,UAAW,SACX,MAAO,WAAaX,CACxB,EACQY,EAAO,CACX,MAAO,MACP,IAAK,KACT,EACQC,EAAO,CACX,eAAgB,GAChB,UAAW,CACf,EACQC,EAAO,CACX,UAAW,OACX,UAAW,EACX,SAAUb,EACV,MAAOD,EACP,OAAQa,CACZ,EACQE,EAAmB,CACvBH,EACAP,EACAI,EACAC,EACAJ,EACAK,EACAH,EACAJ,EACAG,EACAJ,CACJ,EAEE,OAAAS,EAAK,SAAW,CACdd,EAAK,QAAQ,UAAW,EAAE,EAC1BgB,EACAD,CACJ,EACEA,EAAK,SAAWE,EAChBP,EAAW,SAAWO,EAEf,CACL,KAAM,KACN,QAAS,CAAE,QAAU,EACrB,QAAS,KACT,SAAU,CACRjB,EAAK,QAAS,EACdc,EACAP,EACAI,EACAC,EACAJ,EACAK,EACAH,EACAJ,EACAG,CACD,CACL,CACA,CAEA,IAAAS,EAAiBnB","x_google_ignoreList":[0]}