{"version":3,"file":"clojure-BxtB1asY.chunk.mjs","sources":["../node_modules/highlight.js/lib/languages/clojure.js"],"sourcesContent":["/*\nLanguage: Clojure\nDescription: Clojure syntax (based on lisp.js)\nAuthor: mfornos\nWebsite: https://clojure.org\nCategory: lisp\n*/\n\n/** @type LanguageFn */\nfunction clojure(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&\\'';\n  const SYMBOL_RE = '[#]?[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:$#]*';\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    built_in:\n      // Clojure keywords\n      globals + ' '\n      + 'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem '\n      + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '\n      + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '\n      + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '\n      + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '\n      + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '\n      + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '\n      + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '\n      + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '\n      + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '\n      + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '\n      + 'monitor-exit macroexpand macroexpand-1 for dosync and or '\n      + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '\n      + 'peek pop doto proxy first rest cons cast coll last butlast '\n      + 'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import '\n      + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '\n      + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '\n      + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '\n      + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '\n      + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '\n      + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '\n      + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '\n      + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '\n      + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '\n      + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '\n      + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '\n      + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    scope: 'number',\n    relevance: 0,\n    variants: [\n      { match: /[-+]?0[xX][0-9a-fA-F]+N?/ }, // hexadecimal                 // 0x2a\n      { match: /[-+]?0[0-7]+N?/ }, // octal                       // 052\n      { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ }, // variable radix from 2 to 36 // 2r101010, 8r52, 36r16\n      { match: /[-+]?[0-9]+\\/[0-9]+N?/ }, // ratio                       // 1/2\n      { match: /[-+]?[0-9]+((\\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ }, // float        // 0.42 4.2E-1M 42E1 42M\n      { match: /[-+]?([1-9][0-9]*|0)N?/ }, // int (don't match leading 0) // 42 42N\n    ]\n  };\n  const CHARACTER = {\n    scope: 'character',\n    variants: [\n      { match: /\\\\o[0-3]?[0-7]{1,2}/ }, // Unicode Octal 0 - 377\n      { match: /\\\\u[0-9a-fA-F]{4}/ }, // Unicode Hex 0000 - FFFF\n      { match: /\\\\(newline|space|tab|formfeed|backspace|return)/ }, // special characters\n      {\n        match: /\\\\\\S/,\n        relevance: 0\n      } // any non-whitespace char\n    ]\n  };\n  const REGEX = {\n    scope: 'regex',\n    begin: /#\"/,\n    end: /\"/,\n    contains: [ hljs.BACKSLASH_ESCAPE ]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });\n  const COMMA = {\n    scope: 'punctuation',\n    match: /,/,\n    relevance: 0\n  };\n  const COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    { relevance: 0 }\n  );\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  const COLLECTION = {\n    begin: \"\\\\[|(#::?\" + SYMBOL_RE + \")?\\\\{\",\n    end: '[\\\\]\\\\}]',\n    relevance: 0\n  };\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    keywords: keywords,\n    className: 'name',\n    begin: SYMBOL_RE,\n    relevance: 0,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [\n    COMMA,\n    LIST,\n    CHARACTER,\n    REGEX,\n    STRING,\n    COMMENT,\n    KEY,\n    COLLECTION,\n    NUMBER,\n    LITERAL,\n    SYMBOL\n  ];\n\n  const GLOBAL = {\n    beginKeywords: globals,\n    keywords: {\n      $pattern: SYMBOL_RE,\n      keyword: globals\n    },\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\n    contains: [\n      {\n        className: 'title',\n        begin: SYMBOL_RE,\n        relevance: 0,\n        excludeEnd: true,\n        // we can only have a single title\n        endsParent: true\n      }\n    ].concat(DEFAULT_CONTAINS)\n  };\n\n  LIST.contains = [\n    GLOBAL,\n    NAME,\n    BODY\n  ];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    name: 'Clojure',\n    aliases: [\n      'clj',\n      'edn'\n    ],\n    illegal: /\\S/,\n    contains: [\n      COMMA,\n      LIST,\n      CHARACTER,\n      REGEX,\n      STRING,\n      COMMENT,\n      KEY,\n      COLLECTION,\n      NUMBER,\n      LITERAL\n    ]\n  };\n}\n\nmodule.exports = clojure;\n"],"names":["clojure","hljs","SYMBOLSTART","SYMBOL_RE","globals","keywords","SYMBOL","NUMBER","CHARACTER","REGEX","STRING","COMMA","COMMENT","LITERAL","COLLECTION","KEY","LIST","BODY","NAME","DEFAULT_CONTAINS","GLOBAL","clojure_1"],"mappings":"4YASA,SAASA,EAAQC,EAAM,CACrB,MAAMC,EAAc,uBACdC,EAAY,QAAUD,EAAc,KAAOA,EAAc,aACzDE,EAAU,6FACVC,EAAW,CACf,SAAUF,EACV,SAEEC,EAAU,2+EA4BhB,EAEQE,EAAS,CACb,MAAOH,EACP,UAAW,CACf,EACQI,EAAS,CACb,MAAO,SACP,UAAW,EACX,SAAU,CACR,CAAE,MAAO,0BAA4B,EACrC,CAAE,MAAO,gBAAkB,EAC3B,CAAE,MAAO,oCAAsC,EAC/C,CAAE,MAAO,uBAAyB,EAClC,CAAE,MAAO,mEAAqE,EAC9E,CAAE,MAAO,wBAA0B,CACpC,CACL,EACQC,EAAY,CAChB,MAAO,YACP,SAAU,CACR,CAAE,MAAO,qBAAuB,EAChC,CAAE,MAAO,mBAAqB,EAC9B,CAAE,MAAO,iDAAmD,EAC5D,CACE,MAAO,OACP,UAAW,CACZ,CACF,CACL,EACQC,EAAQ,CACZ,MAAO,QACP,MAAO,KACP,IAAK,IACL,SAAU,CAAER,EAAK,gBAAkB,CACvC,EACQS,EAAST,EAAK,QAAQA,EAAK,kBAAmB,CAAE,QAAS,IAAI,CAAE,EAC/DU,EAAQ,CACZ,MAAO,cACP,MAAO,IACP,UAAW,CACf,EACQC,EAAUX,EAAK,QACnB,IACA,IACA,CAAE,UAAW,CAAG,CACpB,EACQY,EAAU,CACd,UAAW,UACX,MAAO,sBACX,EACQC,EAAa,CACjB,MAAO,YAAcX,EAAY,QACjC,IAAK,WACL,UAAW,CACf,EACQY,EAAM,CACV,UAAW,SACX,MAAO,WAAaZ,CACxB,EACQa,EAAO,CACX,MAAO,MACP,IAAK,KACT,EACQC,EAAO,CACX,eAAgB,GAChB,UAAW,CACf,EACQC,EAAO,CACX,SAAUb,EACV,UAAW,OACX,MAAOF,EACP,UAAW,EACX,OAAQc,CACZ,EACQE,EAAmB,CACvBR,EACAK,EACAR,EACAC,EACAC,EACAE,EACAG,EACAD,EACAP,EACAM,EACAP,CACJ,EAEQc,EAAS,CACb,cAAehB,EACf,SAAU,CACR,SAAUD,EACV,QAASC,CACV,EACD,IAAK,gCACL,SAAU,CACR,CACE,UAAW,QACX,MAAOD,EACP,UAAW,EACX,WAAY,GAEZ,WAAY,EACb,CACP,EAAM,OAAOgB,CAAgB,CAC7B,EAEE,OAAAH,EAAK,SAAW,CACdI,EACAF,EACAD,CACJ,EACEA,EAAK,SAAWE,EAChBL,EAAW,SAAWK,EAEf,CACL,KAAM,UACN,QAAS,CACP,MACA,KACD,EACD,QAAS,KACT,SAAU,CACRR,EACAK,EACAR,EACAC,EACAC,EACAE,EACAG,EACAD,EACAP,EACAM,CACD,CACL,CACA,CAEA,IAAAQ,EAAiBrB","x_google_ignoreList":[0]}