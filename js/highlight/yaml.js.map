{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/yaml.js"],"names":["module","exports","hljs","LITERALS","URI_CHARACTERS","STRING","className","relevance","variants","begin","end","contains","BACKSLASH_ESCAPE","CONTAINER_STRING","inherit","TIMESTAMP","VALUE_CONTAINER","endsWithParent","excludeEnd","keywords","OBJECT","illegal","ARRAY","MODES","subLanguage","excludeBegin","UNDERSCORE_IDENT_RE","HASH_COMMENT_MODE","beginKeywords","literal","C_NUMBER_RE","VALUE_MODES","pop","push","name","case_insensitive","aliases"],"mappings":"oGAgLAA,EAAOC,QAvKP,SAAcC,GACZ,IAAIC,EAAW,yBAGXC,EAAiB,8BAsBjBC,EAAS,CACXC,UAAW,SACXC,UAAW,EACXC,SAAU,CACR,CAAEC,MAAO,IAAKC,IAAK,KACnB,CAAED,MAAO,IAAKC,IAAK,KACnB,CAAED,MAAO,QAEXE,SAAU,CACRT,EAAKU,iBAhBgB,CACvBN,UAAW,oBACXE,SAAU,CACR,CAAEC,MAAO,OAAQC,IAAK,QACtB,CAAED,MAAO,MAAOC,IAAK,UAmBrBG,EAAmBX,EAAKY,QAAQT,EAAQ,CAC1CG,SAAU,CACR,CAAEC,MAAO,IAAKC,IAAK,KACnB,CAAED,MAAO,IAAKC,IAAK,KACnB,CAAED,MAAO,mBAQTM,EAAY,CACdT,UAAW,SACXG,MAAO,iIAGLO,EAAkB,CACpBN,IAAK,IACLO,gBAAgB,EAChBC,YAAY,EACZP,SAAU,GACVQ,SAAUhB,EACVI,UAAW,GAETa,EAAS,CACXX,MAAO,KACPC,IAAK,KACLC,SAAU,CAACK,GACXK,QAAS,MACTd,UAAW,GAETe,EAAQ,CACVb,MAAO,MACPC,IAAK,MACLC,SAAU,CAACK,GACXK,QAAS,MACTd,UAAW,GAGTgB,EAAQ,CAxEF,CACRjB,UAAW,OACXE,SAAU,CACR,CAAEC,MAAO,gCACT,CAAEA,MAAO,kCACT,CAAEA,MAAO,oCAqEX,CACEH,UAAW,OACXG,MAAO,YACPF,UAAW,IAEb,CAKED,UAAW,SACXG,MAAO,iEAET,CACEA,MAAO,WACPC,IAAK,UACLc,YAAa,OACbC,cAAc,EACdP,YAAY,EACZX,UAAW,GAEb,CACED,UAAW,OACXG,MAAO,SAAWL,GAGpB,CACEE,UAAW,OACXG,MAAO,KAAOL,EAAiB,KAEjC,CACEE,UAAW,OACXG,MAAO,IAAML,GAEf,CACEE,UAAW,OACXG,MAAO,KAAOL,GAEhB,CACEE,UAAW,OACXG,MAAO,IAAMP,EAAKwB,oBAAsB,KAE1C,CACEpB,UAAW,OACXG,MAAO,MAAQP,EAAKwB,oBAAsB,KAE5C,CACEpB,UAAW,SAEXG,MAAO,aACPF,UAAW,GAEbL,EAAKyB,kBACL,CACEC,cAAezB,EACfgB,SAAU,CAAEU,QAAS1B,IAEvBY,EAGA,CACET,UAAW,SACXG,MAAOP,EAAK4B,YAAc,MAC1BvB,UAAW,GAEba,EACAE,EACAjB,GAGE0B,EAAc,GAAH,OAAOR,GAKtB,OAJAQ,EAAYC,MACZD,EAAYE,KAAKpB,GACjBG,EAAgBL,SAAWoB,EAEpB,CACLG,KAAM,OACNC,kBAAkB,EAClBC,QAAS,CAAC,MAAO,QACjBzB,SAAUY","file":"highlight/yaml.js?v=5602cd9b04efd42c8dc5","sourcesContent":["/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/\nfunction yaml(hljs) {\n  var LITERALS = 'true false yes no null';\n\n  // YAML spec allows non-reserved URI characters in tags.\n  var URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+';\n\n  // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n  var KEY = {\n    className: 'attr',\n    variants: [\n      { begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)' },\n      { begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)' }, // double quoted keys\n      { begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)' } // single quoted keys\n    ]\n  };\n\n  var TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [\n      { begin: /\\{\\{/, end: /\\}\\}/ }, // jinja templates Ansible\n      { begin: /%\\{/, end: /\\}/ } // Ruby i18n\n    ]\n  };\n  var STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [\n      { begin: /'/, end: /'/ },\n      { begin: /\"/, end: /\"/ },\n      { begin: /\\S+/ }\n    ],\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      TEMPLATE_VARIABLES\n    ]\n  };\n\n  // Strings inside of value containers (objects) can't contain braces,\n  // brackets, or commas\n  var CONTAINER_STRING = hljs.inherit(STRING, {\n    variants: [\n      { begin: /'/, end: /'/ },\n      { begin: /\"/, end: /\"/ },\n      { begin: /[^\\s,{}[\\]]+/ }\n    ]\n  });\n\n  var DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\n  var TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\n  var FRACTION_RE = '(\\\\.[0-9]*)?';\n  var ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\n  var TIMESTAMP = {\n    className: 'number',\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\n  };\n\n  var VALUE_CONTAINER = {\n    end: ',',\n    endsWithParent: true,\n    excludeEnd: true,\n    contains: [],\n    keywords: LITERALS,\n    relevance: 0\n  };\n  var OBJECT = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  var ARRAY = {\n    begin: '\\\\[',\n    end: '\\\\]',\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n\n  var MODES = [\n    KEY,\n    {\n      className: 'meta',\n      begin: '^---\\\\s*$',\n      relevance: 10\n    },\n    { // multi line string\n      // Blocks start with a | or > followed by a newline\n      //\n      // Indentation of subsequent lines must be the same to\n      // be considered part of the block\n      className: 'string',\n      begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\n    },\n    { // Ruby/Rails erb\n      begin: '<%[%=-]?',\n      end: '[%-]?%>',\n      subLanguage: 'ruby',\n      excludeBegin: true,\n      excludeEnd: true,\n      relevance: 0\n    },\n    { // named tags\n      className: 'type',\n      begin: '!\\\\w+!' + URI_CHARACTERS\n    },\n    // https://yaml.org/spec/1.2/spec.html#id2784064\n    { // verbatim tags\n      className: 'type',\n      begin: '!<' + URI_CHARACTERS + \">\"\n    },\n    { // primary tags\n      className: 'type',\n      begin: '!' + URI_CHARACTERS\n    },\n    { // secondary tags\n      className: 'type',\n      begin: '!!' + URI_CHARACTERS\n    },\n    { // fragment id &ref\n      className: 'meta',\n      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n    },\n    { // fragment reference *ref\n      className: 'meta',\n      begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n    },\n    { // array listing\n      className: 'bullet',\n      // TODO: remove |$ hack when we have proper look-ahead support\n      begin: '-(?=[ ]|$)',\n      relevance: 0\n    },\n    hljs.HASH_COMMENT_MODE,\n    {\n      beginKeywords: LITERALS,\n      keywords: { literal: LITERALS }\n    },\n    TIMESTAMP,\n    // numbers are any valid C-style number that\n    // sit isolated from other words\n    {\n      className: 'number',\n      begin: hljs.C_NUMBER_RE + '\\\\b',\n      relevance: 0\n    },\n    OBJECT,\n    ARRAY,\n    STRING\n  ];\n\n  var VALUE_MODES = [...MODES];\n  VALUE_MODES.pop();\n  VALUE_MODES.push(CONTAINER_STRING);\n  VALUE_CONTAINER.contains = VALUE_MODES;\n\n  return {\n    name: 'YAML',\n    case_insensitive: true,\n    aliases: ['yml', 'YAML'],\n    contains: MODES\n  };\n}\n\nmodule.exports = yaml;\n"],"sourceRoot":""}